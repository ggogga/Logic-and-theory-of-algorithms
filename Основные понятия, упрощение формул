Условия задач:
1.
Упростите логическое выражение:

!(!X + !Y) + ((X -> Y) * X)

Ваша задача – переписать данную формулу в более коротком виде так, чтобы каждая переменная встречалась в ответе как можно меньшее число раз.

Выходные данные
В поле ответа напишите следующий текст:

print("тут_должна_быть_ваша_формула")

При отправке решения на проверку в качестве языка программирования выберите Python 3.

В формуле вам разрешается использовать только следующие элементы:

переменные X, Y (заглавные латинские буквы);
числа 1 и 0 (обозначающие истину и ложь соответственно);
круглые скобки;
знак унарной операции !, означающий инверсию (логическое отрицание);
знаки бинарных операций *, +, #, ->, =, где '*' означает конъюнкцию (логическое И), '+' означает дизъюнкцию (логическое ИЛИ), '#' означает операцию XOR (исключающее ИЛИ), '->' означает импликацию, '=' означает эквивалентность;
Приоритеты операций в порядке убывания: '!', '*', '+' и '#', '->', '='.

Примечание
Пример, как может выглядеть запись формулы в ответе (этот ответ неправильный):

print("(X + Y) * X -> (Y = !X)")
2.
Упростите логическое выражение:

(A -> (B * C)) * (C -> (B * A)) * (B -> (C * A))

Ваша задача – переписать данную формулу в более коротком виде так, чтобы каждая переменная использовалась не более двух раз.

Выходные данные
В поле ответа напишите следующий текст:

print("тут_должна_быть_ваша_формула")

При отправке решения на проверку в качестве языка программирования выберите Python 3.

В формуле вам разрешается использовать только следующие элементы:

переменные A, B, C (заглавные латинские буквы);
числа 1 и 0 (обозначающие истину и ложь соответственно);
круглые скобки;
знак унарной операции !, означающий инверсию (логическое отрицание);
знаки бинарных операций *, +, #, ->, =, где '*' означает конъюнкцию (логическое И), '+' означает дизъюнкцию (логическое ИЛИ), '#' означает операцию XOR (исключающее ИЛИ), '->' означает импликацию, '=' означает эквивалентность;
Приоритеты операций в порядке убывания: '!', '*', '+' и '#', '->', '='.

Примечание
Пример, как может выглядеть запись формулы в ответе (этот ответ неправильный):

print("((A + B) * C -> (A = !C)) # 1")
3.
В вузе ИТ-града существует такая легенда. Студенту, не ответившему ни на один вопрос на экзамене по теории игр, преподаватель даёт последний шанс. Студенту нужно сыграть с преподавателем в игру.

Игра происходит на квадратном клетчатом поле n × n. Изначально все клетки поля пусты. На каждом ходу игрок выбирает пустую клетку, не имеющую общих сторон с закрашенными клетками, и закрашивает её. Касание закрашенных клеток углами допускается. На следующем ходу то же самое делает второй игрок, после него первый и так далее. Тот, кому некуда сделать ход, проигрывает.

Преподаватель уже выбрал размер поля n и предоставил студенту выбор ходить первым или вторым. Что должен выбрать студент, чтобы выиграть в игре? Будем считать, что оба игрока играют оптимально.

Входные данные
Единственная строка входных данных содержит одно целое число n (1 ≤ n ≤ 1018) — размер поля.

Выходные данные
Выведите число 1, если при оптимальной игре обоих игроков выиграет игрок, делающий первый ход, иначе число 2.
4.
Дано N неотрицательных целых чисел. Определите, можно ли с помощью дизъюнкции некоторых из них получить заданное натуральное число X.

Пояснение. Операция поразрядной дизъюнкции (поразрядного 'ИЛИ') над двумя целыми числами выполняется как логическое 'ИЛИ' над каждой парой соответствующих битов двоичной записи этих чисел. Например, , так как:

   10100
ИЛИ
   01100
   =====
   11100
Входные данные
В первой строке входных данных записано натуральное число N. Во второй строке записано натуральное число X. Далее идут N неотрицательных целых чисел, каждое число в отдельной строке. Гарантируется, что ни одно из них не равно X.

Выходные данные
Если число X можно получить дизъюнкцией каких-то из заданных чисел, то выведите эти числа в любом порядке. Не обязательно использовать минимальное количество элементов. В случае нескольких верных ответов выведите любой. Если X получить нельзя, то выведите -1.
